# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graph.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from ajout_voiture import Ui_ajout_voiture 
import sys,res_ajout_voiture
from ajout_voiture import Ui_ajout_voiture as ag_v
from ajout_client import Ui_Form as ag_c
from supprimer_mat import Ui_Form as sup_m
from supp_mar import Ui_Form as sup_mar
from PyQt5.QtWidgets import QMessageBox
from datetime import datetime
from affichage_v import Ui_Form as affv
from rech_mat import Ui_Form as rechm
from rech_mar import Ui_Form as rechmar
from rech_coul import Ui_Form as rechc1
from rech_etat import Ui_Form as rechet
from modifier_v import Ui_Form as modif_v
from affichage_c import Ui_Form as affc
from supprimer_cl import Ui_Form as suppc
from rech_cl import Ui_Form as rechc
from modifier_cl import Ui_Form as modif_cl
from ajout_loc import Ui_Form as ajt_loc
from affichage_loc import Ui_Form as affloc
from supp_loc import Ui_Form as supploc
from dates import Ui_Form as dt
from rech_loc_cin import Ui_Form as rechcinloc
from rech_loc_mat import Ui_Form as rechmatloc
from rech_loc_date import Ui_Form as rechdateloc
from rech_loc_dur import Ui_Form as rechdurloc
from rech_loc_2dates import Ui_Form as rech2dtloc
from modifier_cl import Ui_Form as modif_cl
from modifier_loc import Ui_Form as modif_loc

from location import location
from client import client
import csv
import numpy
import os

from voiture import voiture
class Ui_MainWindow(object):
    
    def __init__(self,agence):
        self.ag= agence 
    def cntn_v(self):
        os.system("fichier_v.csv")
        
    def cntn_cl(self):
        os.system("fichier_cl.csv")
        
        
    def cntn_loc(self):
        os.system("fichier_loc.csv")
        
    def recup_v(self):
        with open('fichier_v.csv', 'r', newline='') as file:
            myreader = csv.reader(file, delimiter=',')
            l2=[]
            l=[]
            for rows in myreader:
                v = voiture(rows[0],rows[1],rows[2],rows[4],rows[5])
                if rows[3]=="0":
                    v.set_loc()
                l.append(v.l)
        self.ag.liste_v=l
        self.succ("Fichier recuperé avec succès") 
    
    def enreg_cl(self):
        if(len(self.ag.liste_cl)==0):
            self.warn("liste vide ! essayer de faire la creation")
        else:
            a = numpy.array([self.ag.liste_cl[i] for i in range(len(self.ag.liste_cl))])
            with open('fichier_cl.csv', 'w', newline='') as file:
                mywriter = csv.writer(file, delimiter=',')
                mywriter.writerows(a)
            self.succ("Enregistrement reussie")
    def recup_cl(self):
        with open('fichier_cl.csv', 'r', newline='') as file:
            myreader = csv.reader(file, delimiter=',')
            l2=[]
            l=[]
            for rows in myreader:
                v = client(rows[0],rows[1],rows[2],rows[3],rows[4],rows[5],rows[6])
                l.append(v.l)
        self.ag.liste_cl=l
        self.succ("Fichier recuperé avec succès")

    def enreg_cl(self):
        if(len(self.ag.liste_cl)==0):
            self.warn("liste vide ! essayer de faire la creation")
        else:
            a = numpy.array([self.ag.liste_cl[i] for i in range(len(self.ag.liste_cl))])
            with open('fichier_cl.csv', 'w', newline='') as file:
                mywriter = csv.writer(file, delimiter=',')
                mywriter.writerows(a)
            self.succ("Enregistrement reussie")
    def recup_loc(self):
        with open('fichier_loc.csv', 'r', newline='') as file:
            myreader = csv.reader(file, delimiter=',')
            l=[]
            for rows in myreader:
                v = location(rows[0],rows[1],rows[2],rows[3],rows[4],rows[5])
                l.append(v.l)
        self.ag.liste_loc=l
        self.succ("Fichier recuperé avec succès")
    
    def enreg_loc(self):
        if(len(self.ag.liste_loc)==0):
            self.warn("liste vide ! essayer de faire la creation")
        else:
            a = numpy.array([self.ag.liste_loc[i] for i in range(len(self.ag.liste_loc))])
            with open('fichier_loc.csv', 'w', newline='') as file:
                mywriter = csv.writer(file, delimiter=',')
                mywriter.writerows(a)
            self.succ("Enregistrement reussie")
    def open_modifloc(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=modif_loc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_rech2dt(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=rech2dtloc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_dt(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=dt(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_supploc(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=supploc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_rechdurloc(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=rechdurloc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_rechmatloc(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=rechmatloc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_rechdateloc(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=rechdateloc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_rechcinloc(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=rechcinloc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_supp_cl(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=suppc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_ajout_loc(self):
        if(self.ag.verif_dispo()==False):
            self.warn("il n existe pas de voiture disponible")
        else:
            self.window = QtWidgets.QMainWindow()
            self.ui=ajt_loc(self.ag)
            self.ui.setupUi(self.window)
            self.window.show()
    def open_rech_cl(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=rechc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()   
    def open_modifier_cl(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=modif_cl(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    
    def open_recherche_modifier_v(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=modif_v(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_recherche_coul(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=rechc1(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_recherche_mar(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=rechmar(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_recherche_mat(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=rechm(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_aff_voiture(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=affv(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_aff_client(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=affc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_aff_loc(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=affloc(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_ajout_voiture(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=ag_v(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    def open_recherche_etat(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=rechet(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
        
    def open_ajout_client(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=ag_c(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
        
    def open_supp_mat(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=sup_m(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    
    def open_supp_mar(self):
        self.window = QtWidgets.QMainWindow()
        self.ui=sup_mar(self.ag)
        self.ui.setupUi(self.window)
        self.window.show()
    
    def succ(self,str):
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setText(str)
        msgBox.setWindowTitle(str)
        msgBox.setStandardButtons(QMessageBox.Ok)
        msgBox.exec_()
    
    def warn(self,str):
        msgBox = QMessageBox()
        msgBox.setIcon(QMessageBox.Warning)
        msgBox.setText(str)
        msgBox.setWindowTitle("Msg Error")      
        msgBox.setStandardButtons(QMessageBox.Ok)
        msgBox.exec_()
    
    def age(self,ch):
        l  = ch.split("/")
        aa = int(l[2])
        ch=str(datetime.now())
        l=ch.split("-")
        y = int(l[0])
        ag = y-aa
        return ag

    
    def supp_10ans(self):
        if(len(self.ag.liste_v)==0):
            self.warn("liste vide")
        else:
            j=0
            new=[]
            for i in self.ag.liste_v:
                if(self.age(i[4])<10):
                    new.append(i)
                    j=j+1
            if(j!=len(self.ag.liste_v)):
                self.ag.liste_v = new
                self.succ("Suppréssion reussie")
            else:
                self.warn("pas de voiture >10ans")
                
                
        
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(922, 612)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(-1, -1, 941, 571))
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(-10, -5, 935, 581))
        self.label.setStyleSheet("border-image: url(:/images/Location_cars-01.jpg);")
        self.label.setText("")
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 922, 22))
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setObjectName("menubar")
        self.menuG_stion_de_parc_automobile = QtWidgets.QMenu(self.menubar)
        self.menuG_stion_de_parc_automobile.setObjectName("menuG_stion_de_parc_automobile")
        self.menuMise_jour = QtWidgets.QMenu(self.menuG_stion_de_parc_automobile)
        self.menuMise_jour.setObjectName("menuMise_jour")
        self.menuSupprimer_voiture = QtWidgets.QMenu(self.menuMise_jour)
        self.menuSupprimer_voiture.setObjectName("menuSupprimer_voiture")
        self.menuModifier_voiture = QtWidgets.QMenu(self.menuMise_jour)

        self.menuRecherche_Affichage = QtWidgets.QMenu(self.menuG_stion_de_parc_automobile)
        self.menuRecherche_Affichage.setObjectName("menuRecherche_Affichage")
        self.menuGestion_des_clients = QtWidgets.QMenu(self.menubar)
        self.menuGestion_des_clients.setObjectName("menuGestion_des_clients")
        self.menuMise_jour_2 = QtWidgets.QMenu(self.menuGestion_des_clients)
        self.menuMise_jour_2.setObjectName("menuMise_jour_2")
        
        self.menuModifier_les_donn_es_d_un_client = QtWidgets.QMenu(self.menuMise_jour_2)
        self.menuModifier_les_donn_es_d_un_client.setObjectName("menuModifier_les_donn_es_d_un_client")
        
        self.menuRecherche_affichage = QtWidgets.QMenu(self.menuGestion_des_clients)
        self.menuRecherche_affichage.setObjectName("menuRecherche_affichage")
        self.menuGestion_des_locations = QtWidgets.QMenu(self.menubar)
        self.menuGestion_des_locations.setObjectName("menuGestion_des_locations")
        self.menuMise_jour_3 = QtWidgets.QMenu(self.menuGestion_des_locations)
        self.menuMise_jour_3.setObjectName("menuMise_jour_3")
        self.menuModifier_les_donn_es_d_une_location = QtWidgets.QMenu(self.menuMise_jour_3)
        self.menuModifier_les_donn_es_d_une_location.setObjectName("menuModifier_les_donn_es_d_une_location")
        self.menuRecherche_affichage_2 = QtWidgets.QMenu(self.menuGestion_des_locations)
        self.menuRecherche_affichage_2.setObjectName("menuRecherche_affichage_2")
        self.menuEnregistrement_et_recup_ration_dans_un_fichier = QtWidgets.QMenu(self.menubar)
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.setObjectName("menuEnregistrement_et_recup_ration_dans_un_fichier")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionAjouter_voiture = QtWidgets.QAction(MainWindow)
        self.actionAjouter_voiture.setObjectName("actionAjouter_voiture")
        self.actionSuppression_d_une_voiture_donn_e = QtWidgets.QAction(MainWindow)
        self.actionSuppression_d_une_voiture_donn_e.setObjectName("actionSuppression_d_une_voiture_donn_e")
        self.actionSuppression_des_voitures_d_une_marque_donn_e = QtWidgets.QAction(MainWindow)
        self.actionSuppression_des_voitures_d_une_marque_donn_e.setObjectName("actionSuppression_des_voitures_d_une_marque_donn_e")
        self.actionSuppression_des_voitures_age_10_ans = QtWidgets.QAction(MainWindow)
        self.actionSuppression_des_voitures_age_10_ans.setObjectName("actionSuppression_des_voitures_age_10_ans")
        self.actionModifier_v = QtWidgets.QAction(MainWindow)
        self.actionModifier_v.setObjectName("actionModifier_v")
        self.actionContenu_du_dictionnaire_voitures = QtWidgets.QAction(MainWindow)
        self.actionContenu_du_dictionnaire_voitures.setObjectName("actionContenu_du_dictionnaire_voitures")
        self.actionRecherche_par_matricule = QtWidgets.QAction(MainWindow)
        self.actionRecherche_par_matricule.setObjectName("actionRecherche_par_matricule")
        self.actionRecherche_par_marque = QtWidgets.QAction(MainWindow)
        self.actionRecherche_par_marque.setObjectName("actionRecherche_par_marque")
        self.actionRecherche_par_couleur = QtWidgets.QAction(MainWindow)
        self.actionRecherche_par_couleur.setObjectName("actionRecherche_par_couleur")
        self.actionRecherche_par_voitures_disponibles = QtWidgets.QAction(MainWindow)
        self.actionRecherche_par_voitures_disponibles.setObjectName("actionRecherche_par_voitures_disponibles")
        self.actionRecherche_des_voitures_lou_es = QtWidgets.QAction(MainWindow)
        self.actionRecherche_des_voitures_lou_es.setObjectName("actionRecherche_des_voitures_lou_es")
        self.actionRecherche_des_voitures_lou_es_entre_2_dates = QtWidgets.QAction(MainWindow)
        self.actionRecherche_des_voitures_lou_es_entre_2_dates.setObjectName("actionRecherche_des_voitures_lou_es_entre_2_dates")
        self.actionAjouter_un_nouvel_client = QtWidgets.QAction(MainWindow)
        self.actionAjouter_un_nouvel_client.setObjectName("actionAjouter_un_nouvel_client")
        self.actionSupprimer_un_client = QtWidgets.QAction(MainWindow)
        self.actionSupprimer_un_client.setObjectName("actionSupprimer_un_client")
        
        self.ActionModifier_les_donn_es_d_un_client= QtWidgets.QAction(MainWindow)
        self.ActionModifier_les_donn_es_d_un_client.setObjectName("ActionModifier_les_donn_es_d_un_client")
        
        
        self.actionContenu_du_dictionnaire_clients = QtWidgets.QAction(MainWindow)
        self.actionContenu_du_dictionnaire_clients.setObjectName("actionContenu_du_dictionnaire_clients")
        self.actionRecherche_par_CIN = QtWidgets.QAction(MainWindow)
        self.actionRecherche_par_CIN.setObjectName("actionRecherche_par_CIN")
        self.actionAjouter_une_nouvelle_location = QtWidgets.QAction(MainWindow)
        self.actionAjouter_une_nouvelle_location.setObjectName("actionAjouter_une_nouvelle_location")
        
        self.actionmodifier_une_location = QtWidgets.QAction(MainWindow)
        self.actionmodifier_une_location.setObjectName("actionmodifier_une_location")
        
        self.actionSupprimer_une_location = QtWidgets.QAction(MainWindow)
        self.actionSupprimer_une_location.setObjectName("actionSupprimer_une_location")

        self.actionContenu_du_dictionnaire_locations = QtWidgets.QAction(MainWindow)
        self.actionContenu_du_dictionnaire_locations.setObjectName("actionContenu_du_dictionnaire_locations")
        self.actionRecherche_par_CIN_2 = QtWidgets.QAction(MainWindow)
        self.actionRecherche_par_CIN_2.setObjectName("actionRecherche_par_CIN_2")
        self.actionRecherche_par_mat = QtWidgets.QAction(MainWindow)
        self.actionRecherche_par_mat.setObjectName("actionRecherche_par_mat")
        self.actionRecherche_par_date_donn_e = QtWidgets.QAction(MainWindow)
        self.actionRecherche_par_date_donn_e.setObjectName("actionRecherche_par_date_donn_e")
        self.actionRecherche_par_dur_e_de_location = QtWidgets.QAction(MainWindow)
        self.actionRecherche_par_dur_e_de_location.setObjectName("actionRecherche_par_dur_e_de_location")
        self.actionRecherche_des_locations_entre_2_dates_donn_es = QtWidgets.QAction(MainWindow)
        self.actionRecherche_des_locations_entre_2_dates_donn_es.setObjectName("actionRecherche_des_locations_entre_2_dates_donn_es")
        self.actionEnregistrement_fichier_voitures = QtWidgets.QAction(MainWindow)
        self.actionEnregistrement_fichier_voitures.setObjectName("actionEnregistrement_fichier_voitures")
        self.actionEnregistrement_fichier_CLIENTS = QtWidgets.QAction(MainWindow)
        self.actionEnregistrement_fichier_CLIENTS.setObjectName("actionEnregistrement_fichier_CLIENTS")
        self.actionEnregistrement_fichier_LOCATONS = QtWidgets.QAction(MainWindow)
        self.actionEnregistrement_fichier_LOCATONS.setObjectName("actionEnregistrement_fichier_LOCATONS")
        self.actionR_cuperation_fichier_VOITURES = QtWidgets.QAction(MainWindow)
        self.actionR_cuperation_fichier_VOITURES.setObjectName("actionR_cuperation_fichier_VOITURES")
        
        self.actioncontenuVOITURES = QtWidgets.QAction(MainWindow)
        self.actioncontenuVOITURES.setObjectName("actioncontenuVOITURES")
        
        self.actionR_cuperation_fichier_Clients = QtWidgets.QAction(MainWindow)
        self.actionR_cuperation_fichier_Clients.setObjectName("actionR_cuperation_fichier_Clients")
        
        self.a1 = QtWidgets.QAction(MainWindow)
        self.a1.setObjectName("a1")
        
        self.actionR_cuperation_fichier_LOCATIONS = QtWidgets.QAction(MainWindow)
        self.actionR_cuperation_fichier_LOCATIONS.setObjectName("actionR_cuperation_fichier_LOCATIONS")
        
        self.a2 = QtWidgets.QAction(MainWindow)
        self.a2.setObjectName("a2")
        
        self.menuSupprimer_voiture.addAction(self.actionSuppression_d_une_voiture_donn_e)
        self.menuSupprimer_voiture.addSeparator()
        self.menuSupprimer_voiture.addAction(self.actionSuppression_des_voitures_d_une_marque_donn_e)
        self.menuSupprimer_voiture.addSeparator()
        self.menuSupprimer_voiture.addAction(self.actionSuppression_des_voitures_age_10_ans)

        self.menuMise_jour.addAction(self.actionAjouter_voiture)
        self.menuMise_jour.addSeparator()
        self.menuMise_jour.addAction(self.menuSupprimer_voiture.menuAction())
        self.menuMise_jour.addSeparator()
        self.menuMise_jour.addAction(self.actionModifier_v)
        self.menuRecherche_Affichage.addAction(self.actionContenu_du_dictionnaire_voitures)
        self.menuRecherche_Affichage.addSeparator()
        self.menuRecherche_Affichage.addAction(self.actionRecherche_par_matricule)
        self.menuRecherche_Affichage.addSeparator()
        self.menuRecherche_Affichage.addAction(self.actionRecherche_par_marque)
        self.menuRecherche_Affichage.addSeparator()
        self.menuRecherche_Affichage.addAction(self.actionRecherche_par_couleur)
        self.menuRecherche_Affichage.addSeparator()
        self.menuRecherche_Affichage.addAction(self.actionRecherche_par_voitures_disponibles)
        self.menuRecherche_Affichage.addSeparator()
        self.menuRecherche_Affichage.addSeparator()
        self.menuRecherche_Affichage.addAction(self.actionRecherche_des_voitures_lou_es_entre_2_dates)
        self.menuG_stion_de_parc_automobile.addAction(self.menuMise_jour.menuAction())
        self.menuG_stion_de_parc_automobile.addSeparator()
        self.menuG_stion_de_parc_automobile.addAction(self.menuRecherche_Affichage.menuAction())
        
        self.menuMise_jour_2.addAction(self.actionAjouter_un_nouvel_client)
        self.menuMise_jour_2.addSeparator()
        self.menuMise_jour_2.addAction(self.actionSupprimer_un_client)
        self.menuMise_jour_2.addSeparator()
        self.menuMise_jour_2.addAction(self.ActionModifier_les_donn_es_d_un_client)

        self.menuRecherche_affichage.addAction(self.actionContenu_du_dictionnaire_clients)
        self.menuRecherche_affichage.addSeparator()
        self.menuRecherche_affichage.addAction(self.actionRecherche_par_CIN)
        self.menuGestion_des_clients.addAction(self.menuMise_jour_2.menuAction())
        self.menuGestion_des_clients.addSeparator()
        self.menuGestion_des_clients.addAction(self.menuRecherche_affichage.menuAction())
        self.menuMise_jour_3.addAction(self.actionAjouter_une_nouvelle_location)
        self.menuMise_jour_3.addSeparator()
        self.menuMise_jour_3.addAction(self.actionSupprimer_une_location)
        self.menuMise_jour_3.addSeparator()
        self.menuMise_jour_3.addAction(self.actionmodifier_une_location)
        
        self.menuRecherche_affichage_2.addAction(self.actionContenu_du_dictionnaire_locations)
        self.menuRecherche_affichage_2.addSeparator()
        self.menuRecherche_affichage_2.addAction(self.actionRecherche_par_CIN_2)
        self.menuRecherche_affichage_2.addSeparator()
        self.menuRecherche_affichage_2.addAction(self.actionRecherche_par_mat)
        self.menuRecherche_affichage_2.addSeparator()
        self.menuRecherche_affichage_2.addAction(self.actionRecherche_par_date_donn_e)
        self.menuRecherche_affichage_2.addSeparator()
        self.menuRecherche_affichage_2.addAction(self.actionRecherche_par_dur_e_de_location)
        self.menuRecherche_affichage_2.addSeparator()
        self.menuRecherche_affichage_2.addAction(self.actionRecherche_des_locations_entre_2_dates_donn_es)
        self.menuGestion_des_locations.addAction(self.menuMise_jour_3.menuAction())
        self.menuGestion_des_locations.addSeparator()
        self.menuGestion_des_locations.addAction(self.menuRecherche_affichage_2.menuAction())
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addAction(self.actionEnregistrement_fichier_voitures)
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addAction(self.actionR_cuperation_fichier_VOITURES)
        
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addAction(self.actioncontenuVOITURES)
        
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addSeparator()
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addAction(self.actionEnregistrement_fichier_CLIENTS)
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addAction(self.actionR_cuperation_fichier_Clients)
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addAction(self.a1)

        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addSeparator()
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addAction(self.actionEnregistrement_fichier_LOCATONS)
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addAction(self.actionR_cuperation_fichier_LOCATIONS)
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.addAction(self.a2)

        self.menubar.addAction(self.menuG_stion_de_parc_automobile.menuAction())
        self.menubar.addAction(self.menuGestion_des_clients.menuAction())
        self.menubar.addAction(self.menuGestion_des_locations.menuAction())
        self.menubar.addAction(self.menuEnregistrement_et_recup_ration_dans_un_fichier.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.actionAjouter_un_nouvel_client.triggered.connect(lambda :self.open_ajout_client())

        self.actionAjouter_voiture.triggered.connect(lambda :self.open_ajout_voiture())
        
        self.actionSuppression_d_une_voiture_donn_e.triggered.connect(lambda :self.open_supp_mat())
        
        self.actionSuppression_des_voitures_d_une_marque_donn_e.triggered.connect(lambda :self.open_supp_mar())

        self.actionSuppression_des_voitures_age_10_ans.triggered.connect(lambda :self.supp_10ans())

        self.actionContenu_du_dictionnaire_voitures.triggered.connect(lambda :self.open_aff_voiture())

        self.actionContenu_du_dictionnaire_voitures.triggered.connect(lambda :self.open_aff_voiture())

        self.actionRecherche_par_matricule.triggered.connect(lambda :self.open_recherche_mat())
        self.actionRecherche_par_marque.triggered.connect(lambda :self.open_recherche_mar())
        self.actionRecherche_par_couleur.triggered.connect(lambda :self.open_recherche_coul())
        self.actionRecherche_par_voitures_disponibles.triggered.connect(lambda :self.open_recherche_etat())
        
        self.actionEnregistrement_fichier_voitures.triggered.connect(lambda :self.enreg_v())
        
        self.actionR_cuperation_fichier_VOITURES.triggered.connect(lambda :self.recup_v())
        
        self.actioncontenuVOITURES.triggered.connect(lambda :self.cntn_v())      
        self.a1.triggered.connect(lambda :self.cntn_cl())      
        self.a2.triggered.connect(lambda :self.cntn_loc())      

        self.actionEnregistrement_fichier_CLIENTS.triggered.connect(lambda :self.enreg_cl())
        
        self.actionR_cuperation_fichier_Clients.triggered.connect(lambda :self.recup_cl())
        
        self.actionModifier_v.triggered.connect(lambda :self.open_recherche_modifier_v())
        
        self.ActionModifier_les_donn_es_d_un_client.triggered.connect(lambda :self.open_modifier_cl())

        self.actionContenu_du_dictionnaire_clients.triggered.connect(lambda :self.open_aff_client())

        self.actionSupprimer_un_client.triggered.connect(lambda :self.open_supp_cl())
        self.actionRecherche_par_CIN.triggered.connect(lambda :self.open_rech_cl())
        self.actionAjouter_une_nouvelle_location.triggered.connect(lambda :self.open_ajout_loc())
                
        self.actionContenu_du_dictionnaire_locations.triggered.connect(lambda :self.open_aff_loc())

        self.actionSupprimer_une_location.triggered.connect(lambda :self.open_supploc())
        self.actionmodifier_une_location.triggered.connect(lambda :self.open_modifloc())

        self.actionRecherche_des_voitures_lou_es_entre_2_dates.triggered.connect(lambda :self.open_dt())
        
        self.actionEnregistrement_fichier_LOCATONS.triggered.connect(lambda :self.enreg_loc())
        
        self.actionR_cuperation_fichier_LOCATIONS.triggered.connect(lambda :self.recup_loc())
        self.actionRecherche_par_CIN_2.triggered.connect(lambda :self.open_rechcinloc())
        self.actionRecherche_par_mat.triggered.connect(lambda :self.open_rechmatloc())
        self.actionRecherche_par_date_donn_e.triggered.connect(lambda :self.open_rechdateloc())
        self.actionRecherche_par_dur_e_de_location.triggered.connect(lambda :self.open_rechdurloc())
        self.actionRecherche_des_locations_entre_2_dates_donn_es.triggered.connect(lambda :self.open_rech2dt())
        self.actionRecherche_des_locations_entre_2_dates_donn_es.triggered.connect(lambda :self.open_rech2dt())


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menuG_stion_de_parc_automobile.setTitle(_translate("MainWindow", "Géstion de parc automobile"))
        self.menuMise_jour.setTitle(_translate("MainWindow", "Mise à jour"))
        self.menuSupprimer_voiture.setTitle(_translate("MainWindow", "Supprimer voiture"))
        self.menuRecherche_Affichage.setTitle(_translate("MainWindow", "Recherche ,Affichage"))
        self.menuGestion_des_clients.setTitle(_translate("MainWindow", "Gestion des clients"))
        self.menuMise_jour_2.setTitle(_translate("MainWindow", "Mise à jour"))
        
        
        self.menuRecherche_affichage.setTitle(_translate("MainWindow", "Recherche ,affichage"))
        self.menuGestion_des_locations.setTitle(_translate("MainWindow", "Gestion des locations"))
        self.menuMise_jour_3.setTitle(_translate("MainWindow", "Mise à jour"))
        self.menuRecherche_affichage_2.setTitle(_translate("MainWindow", "Recherche ,affichage"))
        self.menuEnregistrement_et_recup_ration_dans_un_fichier.setTitle(_translate("MainWindow", "Enregistrement et récupération dans un fichier"))
        self.actionAjouter_voiture.setText(_translate("MainWindow", "Ajouter voiture"))
        self.actionSuppression_d_une_voiture_donn_e.setText(_translate("MainWindow", "Suppression d\'une voiture donnée"))
        self.actionSuppression_des_voitures_d_une_marque_donn_e.setText(_translate("MainWindow", "Suppression des voitures d\'une marque donnée"))
        self.actionSuppression_des_voitures_age_10_ans.setText(_translate("MainWindow", "Suppression des voitures (age>10 ans)"))
        self.actionModifier_v.setText(_translate("MainWindow","Modifier couleur/prix"))
        self.actionContenu_du_dictionnaire_voitures.setText(_translate("MainWindow", "Affichage des voitures"))
        self.actionRecherche_par_matricule.setText(_translate("MainWindow", "Recherche par matricule"))
        self.actionRecherche_par_marque.setText(_translate("MainWindow", "Recherche par marque"))
        self.actionRecherche_par_couleur.setText(_translate("MainWindow", "Recherche par couleur"))
        self.actionRecherche_par_voitures_disponibles.setText(_translate("MainWindow", "Recherche des voitures par etat"))
        self.actionRecherche_des_voitures_lou_es_entre_2_dates.setText(_translate("MainWindow", "Recherche des voitures louées entre 2 dates"))
        self.actionAjouter_un_nouvel_client.setText(_translate("MainWindow", "Ajouter un nouvel client"))
        self.actionSupprimer_un_client.setText(_translate("MainWindow", "Supprimer un client"))
        
        self.ActionModifier_les_donn_es_d_un_client.setText(_translate("MainWindow", "Modifier les données d'un client"))
     
        
        self.actionContenu_du_dictionnaire_clients.setText(_translate("MainWindow", "Affichage des clients"))
        self.actionRecherche_par_CIN.setText(_translate("MainWindow", "Recherche par CIN"))
        self.actionAjouter_une_nouvelle_location.setText(_translate("MainWindow", "Ajouter une nouvelle location"))
        self.actionSupprimer_une_location.setText(_translate("MainWindow", "Supprimer une location"))
        self.actionmodifier_une_location.setText(_translate("MainWindow", "Modifier une location"))

        self.actionContenu_du_dictionnaire_locations.setText(_translate("MainWindow", "Affichage des locations"))
        self.actionRecherche_par_CIN_2.setText(_translate("MainWindow", "Recherche par CIN"))
        self.actionRecherche_par_mat.setText(_translate("MainWindow", "Recherche par mat"))
        self.actionRecherche_par_date_donn_e.setText(_translate("MainWindow", "Recherche par date donnée"))
        self.actionRecherche_par_dur_e_de_location.setText(_translate("MainWindow", "Recherche par durée de location"))
        self.actionRecherche_des_locations_entre_2_dates_donn_es.setText(_translate("MainWindow", "Recherche des locations entre 2 dates données"))
        self.actionEnregistrement_fichier_voitures.setText(_translate("MainWindow", "Enregistrement fichier VOITURES"))
        self.actionEnregistrement_fichier_CLIENTS.setText(_translate("MainWindow", "Enregistrement fichier CLIENTS"))
        self.actionEnregistrement_fichier_LOCATONS.setText(_translate("MainWindow", "Enregistrement fichier LOCATONS"))
        self.actionR_cuperation_fichier_VOITURES.setText(_translate("MainWindow", "Récuperation fichier VOITURES"))
        self.actioncontenuVOITURES.setText(_translate("MainWindow", "Contenu du fichier VOITURES"))
        self.actionR_cuperation_fichier_Clients.setText(_translate("MainWindow", "Récuperation fichier CLIENTS"))
        self.a1.setText(_translate("MainWindow", "Contenu du fichier CLIENTS"))
        self.actionR_cuperation_fichier_LOCATIONS.setText(_translate("MainWindow", "Récuperation fichier LOCATIONS"))
        self.a2.setText(_translate("MainWindow", "Contenu du fichier LOCATIONS"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    
